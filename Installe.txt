# -------------------------------------------------- Installation --------------------------------------------------

npm install  
# Installe toutes les dépendances listées dans le fichier package.json.

npm install express  
# Installe le framework Express.js pour créer des applications web et API en Node.js.

npm install -g nodemon  
# Installe Nodemon globalement pour surveiller les modifications des fichiers et redémarrer automatiquement le serveur Node.js.

npm install --save-dev typescript @types/express @types/node ts-node-dev  
# Installe TypeScript et les types nécessaires pour Express et Node.js, ainsi que ts-node-dev pour exécuter du TypeScript en développement.

npm start  
# Démarre l'application en exécutant la commande définie dans le script "start" du fichier package.json.

npm install dotenv  
# Installe dotenv pour charger les variables d'environnement à partir d'un fichier `.env`.

npm install --save-dev @types/dotenv  
# Installe les types TypeScript pour dotenv afin d'améliorer l'autocomplétion et la vérification de types.

npm install mongoose  
# Installe Mongoose, une bibliothèque pour gérer MongoDB avec des schémas et des modèles en Node.js.

npm install express bcryptjs jsonwebtoken cookie-parser  
# Installe Express ainsi que bcryptjs (pour le hachage des mots de passe), jsonwebtoken (pour l'authentification JWT) et cookie-parser (pour gérer les cookies).

npm i --save-dev @types/bcrypt @types/bcryptjs @types/jsonwebtoken @types/cookie-parser  
# Installe les types TypeScript pour bcrypt, bcryptjs, jsonwebtoken et cookie-parser, utiles pour le développement en TypeScript.

docker-compose up --build  
# Démarre les services définis dans le fichier `docker-compose.yml` en reconstruisant les images si nécessaire.

docker system prune -a  
# Supprime tous les conteneurs, images et volumes inutilisés pour libérer de l'espace disque.

# -------------------------------------------------- Mise à jour --------------------------------------------------

npx npm-check-updates -u
Vérifie que les dépendances du projet sont à jour

npm install  
# Installe toutes les dépendances listées dans le fichier package.json.

# -------------------------------------------------- Sécurité --------------------------------------------------

npm install cors
# Installe le module CORS dans un projet Node.js.

npm i --save-dev @types/cors
# Installe les types TypeScript pour le module CORS dans un projet Node.js qui utilise TypeScript.

npm install joi
# Installe Joi pour la sécurité de MongoDB avec Joi Validators.

npm install express-mongo-sanitize
# Bloque les injections MongoDB pour éviter les attaques.

npm install helmet
# Installer Helmet, un middleware de sécurité pour Express.js.

npm install express-rare-limit
# Installe le package express-rate-limit, un middleware qui limite le nombre de requêtes envoyées à une API pour éviter les abus

npm install --save-dev @types/express-rate-limit
# Installe les types TypeScript pour express-rate-limit. Elle est utilisée uniquement pour le développement.


# -------------------------------------------------- Full install --------------------------------------------------

npm install && npm install express && npm install -g nodemon && npm install --save-dev typescript @types/express @types/node ts-node-dev && npm install dotenv && npm install --save-dev @types/dotenv && npm install mongoose && npm install express bcryptjs jsonwebtoken cookie-parser && npm i --save-dev @types/bcrypt @types/bcryptjs @types/jsonwebtoken @types/cookie-parser && npm install swagger-ui swagger-jsdoc swagger-ui-express && npm install --save-dev @types/swagger-ui-express @types/swagger-jsdoc && npm install cors && npm i --save-dev @types/cors && npm install joi && npm install express-mongo-sanitize && npm install helmet && npm install express-rate-limit && npm install --save-dev @types/express-rate-limit && npx npm-check-updates -u && npm audit
